#SET 1
1: map
rdd1 = sc.parallelize([1,2,3,4])
rdd2 = rdd1.map(lambda x: x**2)
rdd2.collect()

2: flatMap
rdd1 = sc.parallelize([1,2,3,4])
rdd2 = rdd1.flatMap(lambda x: [x,x**2])
rdd2.collect()

3: filter
rdd1 = sc.parallelize([1,2,3,4])
rdd2 = rdd1.filter(lambda x: x>2)
rdd2.collect()

4: distinct
rdd1 = sc.parallelize([1,2,3,4,1,2,2,])
rdd2 = rdd1.distinct() 
rdd2.collect()

#SET 2
1: reduceByKey
rdd1 = sc.parallelize([('a',1), ('b',1), ('a',1),('a',1)])
rdd2 = rdd1.reduceByKey(lambda x,y: x+y))
rdd2.collect()

2: groupByKey
rdd1 = sc.parallelize([('a',1), ('b',1), ('a',2),('b',3)])
rdd2 = rdd1. groupByKey()
rdd2.collect()

3: sortByKey
rdd1 = sc.parallelize([(1,1), (3,1), (5,1),(2,1)])
rdd2 = rdd1. sortByKey()
rdd2.collect()

#SET 3
1: union
rdd1 = sc.parallelize([1,2,3,1,4])
rdd2 = sc.parallelize([1,2,5,6])
rdd3 = rdd1.union(rdd2)
rdd3.collect()

2: intersection
rdd1 = sc.parallelize([1,2,3,1,4])
rdd2 = sc.parallelize([1,2,5,6])
rdd3 = rdd1.intersection(rdd2)
rdd3.collect()

3: join
rdd1 = sc.parallelize([('a',1),('b',1)])
rdd2 = sc.parallelize([('a',2),('c',1)])
rdd3 = rdd1.join(rdd2)
rdd3.collect()

4: fullOuterJoin
rdd1 = sc.parallelize([('a',1),('b',1)])
rdd2 = sc.parallelize([('a',2),('c',1)])
rdd3 = rdd1.fullOuterJoin(rdd2)
rdd3.collect()



